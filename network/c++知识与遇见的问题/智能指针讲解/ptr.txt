std::auto_ptr（已废弃）所有权模型：
    std::auto_ptr 采用独占所有权模型，即同一时间只有一个 std::auto_ptr 可以拥有某个对象。
    复制和赋值：复制和赋值操作会转移所有权，原 std::auto_ptr 将不再拥有对象。
    局限性：不安全：复制和赋值操作会转移所有权，容易导致悬挂指针。
    不支持数组：std::auto_ptr 不支持管理数组，使用 delete 而不是 delete[] 释放内存。
    已废弃：C++11已将其废弃，
    建议使用 std::unique_ptr。

std::unique_ptr所有权模型：
    std::unique_ptr 也采用独占所有权模型，同一时间只有一个 std::unique_ptr 可以拥有某个对象。
    复制和赋值：std::unique_ptr 禁止复制和赋值操作，但支持移动语义。
    可以通过 std::move 将所有权从一个 std::unique_ptr 转移到另一个。
    安全性：std::unique_ptr 更安全，避免了 std::auto_ptr 的所有权转移问题。支
    持数组：std::unique_ptr 支持管理数组，可以使用 std::unique_ptr<int[]> 来管理数组。
    性能：std::unique_ptr 的性能较高，
    因为它的实现非常轻量级，只包含一个指针。

std::shared_ptr所有权模型：
    std::shared_ptr 采用共享所有权模型，多个 std::shared_ptr 可以同时拥有同一个对象。
    引用计数：std::shared_ptr 使用引用计数来管理对象的生命周期。
    每当有一个新的 std::shared_ptr 指向同一个对象时，引用计数加1；当一个 std::shared_ptr 被销毁或重置时，引用计数减1。
    当引用计数为0时，对象被自动删除。
    线程安全：引用计数的操作是线程安全的，但对象的访问不是线程安全的。
    性能：由于需要维护引用计数，std::shared_ptr 的性能相对较低，
    但仍然非常有用，特别是在需要共享资源的场景中。

在 std::shared_ptr 中，除了维护一个引用计数来记录共享所有权的数量外，
还有一个弱引用计数（weak reference count）。弱引用计数用于管理 std::weak_ptr 的生命周期。


引用计数（Shared Count）作用：记录当前有多少个 std::shared_ptr 指向同一个对象。
增减：当创建一个新的 std::shared_ptr 指向同一个对象时，引用计数加1。
当一个 std::shared_ptr 被销毁或重置时，引用计数减1。
对象销毁：当引用计数为0时，表示没有 std::shared_ptr 指向该对象，对象会被自动删除。

弱引用计数（Weak Count）作用：记录当前有多少个 std::weak_ptr 指向同一个对象。
增减：当创建一个新的 std::weak_ptr 指向同一个对象时，弱引用计数加1。
当一个 std::weak_ptr 被销毁或重置时，弱引用计数减1。
控制块销毁：当引用计数和弱引用计数都为0时，表示没有 std::shared_ptr 和 std::weak_ptr 指向该对象，控制块（control block）会被销毁。

控制块（Control Block）std::shared_ptr 和 std::weak_ptr 都依赖于一个控制块来管理引用计数和弱引用计数。
控制块是一个内部数据结构，
通常包含以下信息：指向对象的指针：实际管理的对象的指针。
引用计数：记录 std::shared_ptr 的数量。弱引用计数：记录 std::weak_ptr 的数量。

弱引用计数的作用管理 std::weak_ptr 的生命周期：
当所有 std::shared_ptr 都被销毁后，对象会被删除，
但 std::weak_ptr 仍然可能存在。
弱引用计数确保在最后一个 std::weak_ptr 被销毁之前，控制块不会被销毁，
从而允许 std::weak_ptr 通过 lock 方法检查对象是否仍然存在。
避免控制块过早销毁：如果没有弱引用计数，当最后一个 std::shared_ptr 被销毁时，控制块会被立即销毁，
即使还有 std::weak_ptr 存在。弱引用计数确保控制块在最后一个 std::weak_ptr 被销毁之前保持有效。


 std::make_shared
 std::make_shared 是 C++11 引入的一个模板函数，
 用于更高效地创建 std::shared_ptr 实例。
 它通过一次内存分配同时创建对象和控制块，从而减少了内存分配的次数，提高了性能。

 优点单一内存分配：
 std::make_shared 在一次内存分配中同时创建对象和控制块，减少了内存碎片，提高了内存使用效率。
 性能：相比直接使用 new 创建对象并通过构造函数传递给 std::shared_ptr，std::make_shared 更高效。
 异常安全：std::make_shared 在内存分配失败时会抛出异常，确保不会留下未初始化的指针。

 std::weak_ptr 的线程安全性std::weak_ptr 本身并不直接管理对象的生命周期，
 而是作为 std::shared_ptr 的一个弱引用。
 std::weak_ptr 的主要用途是避免循环引用和实现观察者模式。
 在多线程环境中，std::weak_ptr 的使用需要注意以下几点：

 引用计数引用计数：std::shared_ptr 的引用计数操作是线程安全的，这意味着多个线程可以同时读取同一个 std::shared_ptr 而不会出现问题。
 弱引用计数：std::weak_ptr 的弱引用计数也是线程安全的，多个线程可以同时读取同一个 std::weak_ptr 而不会出现问题。

 lock 方法lock 方法：std::weak_ptr 的 lock 方法用于将 std::weak_ptr 转换为 std::shared_ptr。
 这个操作是线程安全的，但需要注意的是，lock 方法返回的 std::shared_ptr 必须在同一个线程中使用，以避免数据竞争。