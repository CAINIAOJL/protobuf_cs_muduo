#参考unix卷一（套接字联网api）第五章

write一个已经接受到RST的socket，系统内核会发送SIGPIPE给发送进程，如果进程catch/ignore这个信号，write都返回EPIPE错误.

书中原话：
当一个进程向某个已经收到RST的套接字执行写操作时，内核向该进程发送一个SIGPIPE信号，该信号的默认行为是终止进程，因此进程必须捕获它一面不情愿地终止。
不论该进程是捕获了该信号并从其信号处理函数返回，还是简单地忽略该信号，写操作都将返回EPOIPE错误


源码：Kernel 3.16.1

net/ipv4/tcp_input.c:
/* When we get a reset we do this. */
void tcp_reset(struct sock *sk)
{
    /* We want the right error as BSD sees it (and indeed as we do). */
    switch (sk->sk_state) {
    case TCP_SYN_SENT:
        sk->sk_err = ECONNREFUSED;
        break;
    case TCP_CLOSE_WAIT:/*在CLOSE_WAIT状态下收到RST*/
        sk->sk_err = EPIPE;
        break;
    case TCP_CLOSE:
        return;
    default:
        sk->sk_err = ECONNRESET;
    }
    /* This barrier is coupled with smp_rmb() in tcp_poll() */
    smp_wmb();
 
    if (!sock_flag(sk, SOCK_DEAD))
        sk->sk_error_report(sk);
 
    tcp_done(sk);
}

 net/ipv4/tcp.c：
static ssize_t do_tcp_sendpages(struct sock *sk, struct page *page, int offset,
                size_t size, int flags)
{
    ... ...
    err = -EPIPE;
    if (sk->sk_err || (sk->sk_shutdown & SEND_SHUTDOWN))
        goto out_err;
    ... ...
 
out_err:
    return sk_stream_error(sk, flags, err);    
}

net/ipv4/tcp.c：
int tcp_sendmsg(struct kiocb *iocb, struct sock *sk, struct msghdr *msg,
        size_t size)
{
    ... ...
    err = -EPIPE;
    if (sk->sk_err || (sk->sk_shutdown & SEND_SHUTDOWN))
        goto out_err;
    ... ...
 
out_err:
    err = sk_stream_error(sk, flags, err);
    release_sock(sk);
    return err;
}

int sk_stream_error(struct sock *sk, int flags, int err)
{
    if (err == -EPIPE)
        err = sock_error(sk) ? : -EPIPE;
    if (err == -EPIPE && !(flags & MSG_NOSIGNAL))
        send_sig(SIGPIPE, current, 0);
    return err;
}
EXPORT_SYMBOL(sk_stream_error);

总结来说，造成这一结果的原因有：
1）在CLOSE_WAIT状态的连接上发送数据（对端已经关闭了连接），触发对端的RST；

2）在本端socket上已经调用过shutdown(SEND_SHUTDOWN)；